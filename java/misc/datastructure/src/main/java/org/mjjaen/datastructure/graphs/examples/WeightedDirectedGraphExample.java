package org.mjjaen.datastructure.graphs.examples;

import lombok.extern.slf4j.Slf4j;
import org.mjjaen.datastructure.graphs.WeightedGraph;
import org.mjjaen.datastructure.graphs.impl.AdjacencyListWeightedGraph;
import org.mjjaen.datastructure.graphs.impl.AdjacencyMatrixWeightedGraph;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class WeightedDirectedGraphExample extends GraphExample {
    @Override
    public void run() {
        log.info("Creating general vertex ...");
        log.info("Testing adjacency matrix weighted directed graph ...");
        WeightedGraph<String> weightedDirectedGraph = new AdjacencyMatrixWeightedGraph<>(8, true);
        prepareGraph(weightedDirectedGraph);
        test(weightedDirectedGraph);
        log.info("Testing adjacency list weighted directed graph ...");
        WeightedGraph<String> weightedDirectedGraph2 = new AdjacencyListWeightedGraph<>(8, true);
        prepareGraph(weightedDirectedGraph2);
        test(weightedDirectedGraph2);

    }

    private void prepareGraph(WeightedGraph<String> weightedDirectedGraph) {
        weightedDirectedGraph.addVertex(vertexA);
        weightedDirectedGraph.addVertex(vertexB);
        weightedDirectedGraph.addVertex(vertexC);
        weightedDirectedGraph.addVertex(vertexD);
        weightedDirectedGraph.addVertex(vertexE);
        weightedDirectedGraph.addVertex(vertexF);
        weightedDirectedGraph.addVertex(vertexG);
        weightedDirectedGraph.addVertex(vertexH);
        weightedDirectedGraph.addEdge(vertexA, vertexB, 5);
        weightedDirectedGraph.addEdge(vertexB, vertexC, 10);
        weightedDirectedGraph.addEdge(vertexB, vertexH, 15);
        weightedDirectedGraph.addEdge(vertexC, vertexE, 20);
        weightedDirectedGraph.addEdge(vertexC, vertexD, 25);
        weightedDirectedGraph.addEdge(vertexH, vertexE, 30);
        weightedDirectedGraph.addEdge(vertexE, vertexF, 35);
        weightedDirectedGraph.addEdge(vertexE, vertexG, 40);
    }

    private void test(WeightedGraph<String> weightedDirectedGraph) {
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexA);
        assert null != weightedDirectedGraph.getEdge(vertexA, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexA, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexB, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexB, vertexB);
        assert null != weightedDirectedGraph.getEdge(vertexB, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexB, vertexD);
        assert null == weightedDirectedGraph.getEdge(vertexB, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexB, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexB, vertexG);
        assert null != weightedDirectedGraph.getEdge(vertexB, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexC, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexC, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexC, vertexC);
        assert null != weightedDirectedGraph.getEdge(vertexC, vertexD);
        assert null != weightedDirectedGraph.getEdge(vertexC, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexC, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexC, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexC, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexD);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexD, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexE, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexE, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexE, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexE, vertexD);
        assert null == weightedDirectedGraph.getEdge(vertexE, vertexE);
        assert null != weightedDirectedGraph.getEdge(vertexE, vertexF);
        assert null != weightedDirectedGraph.getEdge(vertexE, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexE, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexD);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexF, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexD);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexG, vertexH);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexA);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexB);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexC);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexD);
        assert null != weightedDirectedGraph.getEdge(vertexH, vertexE);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexF);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexG);
        assert null == weightedDirectedGraph.getEdge(vertexH, vertexH);

        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexA);
        assert weightedDirectedGraph.getAdjacentWeights(vertexA).get(vertexB) == 5;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexE);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexA).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexB).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexB).containsKey(vertexB);
        assert weightedDirectedGraph.getAdjacentWeights(vertexB).get(vertexC) == 10;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexB).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexB).containsKey(vertexE);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexB).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexB).containsKey(vertexG);
        assert weightedDirectedGraph.getAdjacentWeights(vertexB).get(vertexH) == 15;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexC).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexC).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexC).containsKey(vertexC);
        assert weightedDirectedGraph.getAdjacentWeights(vertexC).get(vertexD) == 25;
        assert weightedDirectedGraph.getAdjacentWeights(vertexC).get(vertexE) == 20;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexC).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexC).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexC).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexE);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexD).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexE);
        assert weightedDirectedGraph.getAdjacentWeights(vertexE).get(vertexF) == 35;
        assert weightedDirectedGraph.getAdjacentWeights(vertexE).get(vertexG) == 40;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexE);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexF).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexE);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexD);
        assert weightedDirectedGraph.getAdjacentWeights(vertexH).get(vertexE) == 30;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexH).containsKey(vertexH);

        weightedDirectedGraph.removeEdge(vertexE, vertexG);
        assert weightedDirectedGraph.getEdge(vertexE, vertexA) == null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexB) == null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexC) == null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexD) == null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexE) == null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexF) != null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexG) == null;
        assert weightedDirectedGraph.getEdge(vertexE, vertexH) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexA) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexB) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexC) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexD) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexE) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexF) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexG) == null;
        assert weightedDirectedGraph.getEdge(vertexG, vertexH) == null;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexE);
        assert weightedDirectedGraph.getAdjacentWeights(vertexE).get(vertexF) == 35;
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexE).containsKey(vertexH);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexA);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexB);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexC);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexD);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexE);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexF);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexG);
        assert !weightedDirectedGraph.getAdjacentWeights(vertexG).containsKey(vertexH);
    }
}
